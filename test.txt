#include <iostream>
#include <vector>

using namespace std;

void recover (int arr[],int Left[], int Right[] ,int n, int start, int stop, int j, int k)
{
    for (int i=start; i<=stop; i+=(stop-start)){
        if (start==stop){
            if (start<=(n-1)/2) Left[j-1] = arr[i];
            else Right[k+1]=arr[i];
            break;
        }
        if (i==start){
            j-=1;
            Left[j]=arr[i];
            if (Left[j]<arr[start+1] && Left[j]<arr[stop]){
                Left[j]=0;
                j+=1;
                continue;
            } else{
                recover(arr, Left, Right, n, start+1, stop, j, k);
                j+=1;
            }
        }
        if (i==stop){
            k+=1;
            Right[k]=arr[i];
            if (Right[k]<arr[start] && Right[k]<arr[stop-1]){
                Right[k]=0;
                k-=1;
                continue;
            }else{
                recover(arr, Left, Right, n, start, stop-1, j, k);
                k-=1;
            }
        }
    }
}

int main()
{
    int n;
    cin>>n;
    int arr[n]; vector<int> recovered;
    for (int i=0; i<n; i++){
        cin>>arr[i];
    }
    int Left[n/2+1] {0};
    int Right[n/2+1] {0};
    recover(arr, Left, Right, n, 0, n-1, (n/2)+1, -1);
    for (int i=0; i<=n/2; i++){
        if (Left[i]!=0) recovered.push_back(Left[i]);
    }
    for (int i=0; i<=n/2; i++){
        if (Right[i]!=0) recovered.push_back(Right[i]);
    }
    int len = recovered.size();
    if (len==n){
        for (int i=0; i<len; i++) cout<<recovered[i]<<" ";
    }
    else cout<<-1;
    return 0;
}
